Q: What happens when you initialize a repository? Why do you need to do it?
A: When we initialize a repository, we can use git commands there.

Q: How is the staging area different from the working directory and the repository? What value do you think it offers?
A: Working directory is the place where files in which we are making changes are there. Staging are ais the place where the files to be commited are added. And repository is the place where commits are made.

Q: How can you use the staging area to make sure you have one commit per logical change?
A: Before commiting anything, it is first added to staging area so that any of the change should not be lost and before commiting it finally, those changes can be reviewed so that to be sure that we have added one logical commit.

Q: What are some situations when branches would be helpful in keeping your history organized? How would branches help?
A: If we want to have many variations to the code, that variations we can have under branches so that we can switch between branches easily by checking out just through branch names.

Q: What are the pros and cons of Git’s automatic merging vs. always doing merges manually?
A: The Git saves efforts and time of coder by merging the commits automatically, whereas when there is a conflict when two commits having the same area of code changed are to be merged, then manual merging is efficient as compared to automatic.

Q: How do the diagrams help you visualize the branch structure?
A: It becomes easy to figure out which commits are reachable and which are not.

Q: What is the result of merging two branches together? Why do we represent it in the diagram the way we do? 
A: The result of merging two branches together is that now commits can be seen from single branch, we have changes made in two branches present in single commit. We represent diagram the way so that it becomes easy to figure out which commits can be accessed through the current branch.